package com.chance.mimorobot.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chance.mimorobot.db.entity.FaceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_ENTITY".
*/
public class FaceEntityDao extends AbstractDao<FaceEntity, Long> {

    public static final String TABLENAME = "FACE_ENTITY";

    /**
     * Properties of entity FaceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Faceid = new Property(1, Long.class, "faceid", false, "FACEID");
        public final static Property Robotno = new Property(2, String.class, "robotno", false, "ROBOTNO");
        public final static Property Operate = new Property(3, int.class, "operate", false, "OPERATE");
        public final static Property Cdate = new Property(4, String.class, "cdate", false, "CDATE");
        public final static Property FaceImageUrl = new Property(5, String.class, "FaceImageUrl", false, "FACE_IMAGE_URL");
        public final static Property SayHelloText = new Property(6, String.class, "SayHelloText", false, "SAY_HELLO_TEXT");
        public final static Property Name = new Property(7, String.class, "Name", false, "NAME");
        public final static Property Des = new Property(8, String.class, "Des", false, "DES");
    }


    public FaceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FaceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FACEID\" INTEGER UNIQUE ," + // 1: faceid
                "\"ROBOTNO\" TEXT," + // 2: robotno
                "\"OPERATE\" INTEGER NOT NULL ," + // 3: operate
                "\"CDATE\" TEXT," + // 4: cdate
                "\"FACE_IMAGE_URL\" TEXT," + // 5: FaceImageUrl
                "\"SAY_HELLO_TEXT\" TEXT," + // 6: SayHelloText
                "\"NAME\" TEXT," + // 7: Name
                "\"DES\" TEXT);"); // 8: Des
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long faceid = entity.getFaceid();
        if (faceid != null) {
            stmt.bindLong(2, faceid);
        }
 
        String robotno = entity.getRobotno();
        if (robotno != null) {
            stmt.bindString(3, robotno);
        }
        stmt.bindLong(4, entity.getOperate());
 
        String cdate = entity.getCdate();
        if (cdate != null) {
            stmt.bindString(5, cdate);
        }
 
        String FaceImageUrl = entity.getFaceImageUrl();
        if (FaceImageUrl != null) {
            stmt.bindString(6, FaceImageUrl);
        }
 
        String SayHelloText = entity.getSayHelloText();
        if (SayHelloText != null) {
            stmt.bindString(7, SayHelloText);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(8, Name);
        }
 
        String Des = entity.getDes();
        if (Des != null) {
            stmt.bindString(9, Des);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long faceid = entity.getFaceid();
        if (faceid != null) {
            stmt.bindLong(2, faceid);
        }
 
        String robotno = entity.getRobotno();
        if (robotno != null) {
            stmt.bindString(3, robotno);
        }
        stmt.bindLong(4, entity.getOperate());
 
        String cdate = entity.getCdate();
        if (cdate != null) {
            stmt.bindString(5, cdate);
        }
 
        String FaceImageUrl = entity.getFaceImageUrl();
        if (FaceImageUrl != null) {
            stmt.bindString(6, FaceImageUrl);
        }
 
        String SayHelloText = entity.getSayHelloText();
        if (SayHelloText != null) {
            stmt.bindString(7, SayHelloText);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(8, Name);
        }
 
        String Des = entity.getDes();
        if (Des != null) {
            stmt.bindString(9, Des);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FaceEntity readEntity(Cursor cursor, int offset) {
        FaceEntity entity = new FaceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // faceid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // robotno
            cursor.getInt(offset + 3), // operate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FaceImageUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SayHelloText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Des
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFaceid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRobotno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOperate(cursor.getInt(offset + 3));
        entity.setCdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFaceImageUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSayHelloText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDes(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FaceEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FaceEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FaceEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
